import { Database } from "bun:sqlite"
import { readFileSync } from "fs"

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new Database("storage.db")

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function needsInitialization(): boolean {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–π –∏–∑ –Ω–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü
    const existingTable = db.query(`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name IN ('folders', 'items')
      LIMIT 1
    `).get()
    
    // –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –∏–∑ –Ω–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü –µ—Å—Ç—å - –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    return !existingTable
  } catch (error) {
    console.warn("‚ö†Ô∏è  Could not check database tables:", error)
    return true // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
  if (!needsInitialization()) {
    console.log("üóÑÔ∏è  Database already exists, skipping initialization")
    return
  }
  
  console.log("üóÑÔ∏è  Initializing SQLite database...")
  
  try {
    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Å—Ö–µ–º—É
    const schema = readFileSync("./db/init.sql", "utf8")
    db.exec(schema)
    
    console.log("‚úÖ Database initialized successfully")
  } catch (error) {
    console.error("‚ùå Failed to initialize database:", error)
    throw error
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
initDatabase()

export { db }