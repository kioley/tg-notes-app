import type { Folder, ID } from '../types/index.ts'
import { db } from './database.ts'

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–ê–ü–ö–ê–ú–ò =====

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getFoldersForUser(userId: number): Promise<Folder[]> {
  console.log(`üìÅ Getting folders for user ${userId}`)
  
  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
  const folders = db.query(`
    SELECT id, user_id as userId, name
    FROM folders 
    WHERE user_id = ? AND deleted_at IS NULL
    ORDER BY created_at
  `).all(userId) as Omit<Folder, 'notesCount'>[]
  
  if (folders.length === 0) {
    return []
  }
  
  // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: —Å—á–∏—Ç–∞–µ–º –∞–π—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–∞–ø–∫–∞–º
  const counts = db.query(`
    SELECT folder_id, COUNT(*) as count
    FROM items 
    WHERE user_id = ? AND deleted_at IS NULL
    GROUP BY folder_id
  `).all(userId) as { folder_id: number, count: number }[]
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  return folders.map(folder => {
    const foundCount = counts.find(c => c.folder_id === folder.id)
    
    return {
      ...folder,
      notesCount: foundCount ? foundCount.count : 0
    }
  })
}

// –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function createFolderForUser(userId: number, name: string): Promise<Folder> {
  console.log(`üìÅ Creating folder "${name}" for user ${userId}`)
  
  const result = db.query(`
    INSERT INTO folders (user_id, name) 
    VALUES (?, ?)
  `).run(userId, name.trim())
  
  return {
    id: result.lastInsertRowid as number,
    userId,
    name: name.trim(),
    notesCount: 0  // –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–∞—è
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function updateFolderForUser(folderId: ID, userId: number, name: string): Promise<Folder | null> {
  console.log(`üìÅ Updating folder ${folderId} to "${name}" for user ${userId}`)
  
  const result = db.query(`
    UPDATE folders 
    SET name = ?, updated_at = CURRENT_TIMESTAMP 
    WHERE id = ? AND user_id = ? AND deleted_at IS NULL
  `).run(name.trim(), folderId, userId)
  
  if (result.changes === 0) {
    return null // –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
  const folder = db.query(`
    SELECT id, user_id as userId, name
    FROM folders 
    WHERE id = ? AND user_id = ?
  `).get(folderId, userId) as Omit<Folder, 'notesCount'> | undefined
  
  if (!folder) {
    return null
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π count –¥–ª—è —ç—Ç–æ–π –ø–∞–ø–∫–∏
  const count = db.query(`
    SELECT COUNT(*) as count
    FROM items 
    WHERE folder_id = ? AND deleted_at IS NULL
  `).get(folderId) as { count: number }
  
  return {
    ...folder,
    notesCount: count.count
  }
}

// –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (soft delete) - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
export async function deleteFoldersForUser(folderIds: ID[], userId: number): Promise<{ deletedCount: number, totalCount: number }> {
  console.log(`üìÅ Deleting folders [${folderIds.join(', ')}] for user ${userId}`)
  
  if (folderIds.length === 0) {
    return { deletedCount: 0, totalCount: 0 }
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è IN –∑–∞–ø—Ä–æ—Å–∞
  const placeholders = folderIds.map(() => '?').join(', ')
  
  // –ö–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —ç—Ç–∏—Ö –ø–∞–ø–∫–∞—Ö
  const itemsResult = db.query(`
    UPDATE items 
    SET deleted_at = CURRENT_TIMESTAMP 
    WHERE folder_id IN (${placeholders}) AND user_id = ? AND deleted_at IS NULL
  `).run(...folderIds, userId)
  
  console.log(`üì¶ Deleted ${itemsResult.changes} items in folders [${folderIds.join(', ')}]`)
  
  // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –ø–∞–ø–∫–∏
  const foldersResult = db.query(`
    UPDATE folders 
    SET deleted_at = CURRENT_TIMESTAMP 
    WHERE id IN (${placeholders}) AND user_id = ? AND deleted_at IS NULL
  `).run(...folderIds, userId)
  
  return {
    deletedCount: foldersResult.changes,
    totalCount: folderIds.length
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
export async function deleteFolderForUser(folderId: ID, userId: number): Promise<boolean> {
  const result = await deleteFoldersForUser([folderId], userId)
  return result.deletedCount > 0
}
