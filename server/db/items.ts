import type { Item, ID } from '../types/index.ts'

// ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï CRUD –§–£–ù–ö–¶–ò–ò –î–õ–Ø ITEMS =====

// –ü–æ–ª—É—á–∏—Ç—å items –ø–∞–ø–∫–∏ (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
export async function getItemsForFolder(folderId: ID, userId: number): Promise<Item[]> {
  console.log(`üì¶ Getting items for folder ${folderId}, user ${userId}`)
  
  // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
  if (folderId === 1) {
    return [
      {
        id: 1,
        userId,
        folderId,
        type: 'note',
        title: '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
        content: '–ú–æ–ª–æ–∫–æ\n–•–ª–µ–±\n–Ø–π—Ü–∞\n–ú–∞—Å–ª–æ',
        updatedAt: new Date().toISOString()
      },
      {
        id: 2,
        userId,
        folderId,
        type: 'note',
        title: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã',
        content: '–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç\n–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º',
        updatedAt: new Date().toISOString()
      }
    ]
  }
  
  if (folderId === 3) {
    return [
      {
        id: 3,
        userId,
        folderId,
        type: 'note',
        title: '–ò–¥–µ—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        content: JSON.stringify({
          text: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –≤ Telegram',
          tags: ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∏–¥–µ—è'],
          priority: '–≤—ã—Å–æ–∫–∏–π'
        }),
        updatedAt: new Date().toISOString()
      }
    ]
  }
  
  return [] // –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞
}

// –ü–æ–ª—É—á–∏—Ç—å item –ø–æ ID
export async function getItemForUser(itemId: ID, userId: number): Promise<Item | null> {
  console.log(`üì¶ Getting item ${itemId} for user ${userId}`)
  
  // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
  const mockItems: Record<number, Item> = {
    1: {
      id: 1,
      userId,
      folderId: 1,
      type: 'note',
      title: '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
      content: '–ú–æ–ª–æ–∫–æ\n–•–ª–µ–±\n–Ø–π—Ü–∞\n–ú–∞—Å–ª–æ',
      updatedAt: new Date().toISOString()
    },
    2: {
      id: 2,
      userId,
      folderId: 1,
      type: 'note',
      title: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã',
      content: '–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç\n–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º',
      updatedAt: new Date().toISOString()
    },
    3: {
      id: 3,
      userId,
      folderId: 3,
      type: 'note',
      title: '–ò–¥–µ—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      content: JSON.stringify({
        text: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –≤ Telegram',
        features: ['–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫', '–ó–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è']
      }),
      updatedAt: new Date().toISOString()
    }
  }
  
  const item = mockItems[itemId as number]
  return item || null
}

// –°–æ–∑–¥–∞—Ç—å item (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
export async function createItemForUser(
  userId: number,
  folderId: ID,
  type: string,
  title: string,
  content: string
): Promise<Item> {
  console.log(`üì¶ Creating ${type} "${title}" in folder ${folderId} for user ${userId}`)
  
  // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
  const newItem: Item = {
    id: Math.floor(Math.random() * 1000) + 100, // –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
    userId,
    folderId,
    type: type.toLowerCase(),
    title: title.trim(),
    content: content, // –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º - –º–æ–∂–µ—Ç –±—ã—Ç—å JSON
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
  
  return newItem
}

// –û–±–Ω–æ–≤–∏—Ç—å item
export async function updateItemForUser(
  itemId: ID,
  userId: number,
  title: string,
  content: string,
  type?: string
): Promise<Item | null> {
  console.log(`üì¶ Updating item ${itemId} for user ${userId}`)
  
  // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ item –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const existingItem = await getItemForUser(itemId, userId)
  
  if (!existingItem) {
    return null
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π item
  return {
    ...existingItem,
    type: type || existingItem.type, // –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø
    title: title.trim(),
    content: content, // –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º - –º–æ–∂–µ—Ç –±—ã—Ç—å JSON
    updatedAt: new Date().toISOString()
  }
}

// –£–¥–∞–ª–∏—Ç—å item
export async function deleteItemForUser(itemId: ID, userId: number): Promise<boolean> {
  console.log(`üì¶ Deleting item ${itemId} for user ${userId}`)
  
  // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ item –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const item = await getItemForUser(itemId, userId)
  
  if (!item) {
    return false // item –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
  
  return true // –∑–∞–≥–ª—É—à–∫–∞ - –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—è–µ–º
}