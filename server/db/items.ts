import type { iItem, ID } from "../types/index.ts";
import { db } from "./database.ts";

// ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï CRUD –§–£–ù–ö–¶–ò–ò –î–õ–Ø ITEMS =====

// –ü–æ–ª—É—á–∏—Ç—å items –ø–∞–ø–∫–∏ (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
export async function getItemsForFolder(
  folderId: ID,
  userId: number
): Promise<iItem[]> {
  console.log(`üì¶ Getting items for folder ${folderId}, user ${userId}`);

  const items = db
    .query(
      `
    SELECT 
      id,
      user_id as userId,
      folder_id as folderId,
      type,
      title,
      content,
      created_at as createdAt,
      updated_at as updatedAt
    FROM items 
    WHERE folder_id = ? AND deleted_at IS NULL
    ORDER BY updated_at DESC
  `
    )
    .all(folderId) as iItem[];

  return items;
}

// –ü–æ–ª—É—á–∏—Ç—å item –ø–æ ID
export async function getItemForUser(
  itemId: ID,
  userId: number
): Promise<iItem | null> {
  console.log(`üì¶ Getting item ${itemId} for user ${userId}`);

  const item = db
    .query(
      `
    SELECT 
      id,
      user_id as userId,
      folder_id as folderId,
      type,
      title,
      content,
      created_at as createdAt,
      updated_at as updatedAt
    FROM items 
    WHERE id = ? AND user_id = ? AND deleted_at IS NULL
  `
    )
    .get(itemId, userId) as iItem | undefined;

  return item || null;
}

// –°–æ–∑–¥–∞—Ç—å item (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
export async function createItemForUser(
  userId: number,
  folderId: ID,
  type: string,
  title: string,
  content: string
): Promise<iItem> {
  console.log(
    `üì¶ Creating ${type} "${title}" in folder ${folderId} for user ${userId}`
  );

  const result = db
    .query(
      `
    INSERT INTO items (user_id, folder_id, type, title, content) 
    VALUES (?, ?, ?, ?, ?)
  `
    )
    .run(userId, folderId, type.toLowerCase(), title.trim(), content);

  const newItem = db
    .query(
      `
    SELECT 
      id,
      user_id as userId,
      folder_id as folderId,
      type,
      title,
      content,
      created_at as createdAt,
      updated_at as updatedAt
    FROM items 
    WHERE id = ?
  `
    )
    .get(result.lastInsertRowid) as iItem;

  return newItem;
}

// –û–±–Ω–æ–≤–∏—Ç—å item (—Ç–æ–ª—å–∫–æ title –∏ content)
export async function updateItemForUser(
  itemId: ID,
  userId: number,
  title: string,
  content: string
): Promise<iItem | null> {
  console.log(`üì¶ Updating item ${itemId} for user ${userId}`);

  const result = db
    .query(
      `
    UPDATE items 
    SET title = ?, content = ?, updated_at = CURRENT_TIMESTAMP
    WHERE id = ? AND user_id = ? AND deleted_at IS NULL
  `
    )
    .run(title.trim(), content, itemId, userId);

  if (result.changes === 0) {
    return null; // item –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π item
  return await getItemForUser(itemId, userId);
}

// –£–¥–∞–ª–∏—Ç—å item (soft delete)
export async function deleteItemForUser(
  itemId: ID,
  userId: number
): Promise<boolean> {
  console.log(`üì¶ Deleting item ${itemId} for user ${userId}`);

  const result = db
    .query(
      `
    UPDATE items 
    SET deleted_at = CURRENT_TIMESTAMP 
    WHERE id = ? AND user_id = ? AND deleted_at IS NULL
  `
    )
    .run(itemId, userId);

  return result.changes > 0;
}
